https://www.youtube.com/watch?v=j5Zsa_eOXeY&list=WL&index=24
Nit
Code coverage
linter
autoformatter
ephemeral environment (!= instance for each branch)


---Linux---
Linux is separating the ressources when you use != apps
VM are useful to separate two program ressources
(ex: program1 needs python2.7 and program 2 needs python3.6
     VM are used to separate the both.
)

---Containers---
Containers create "namespace (group shared ressources together)"
in Linux.
Inside the containers, you can only see the processes
running within it.
Outside, you see all processes runing in Linux
Containers provide a "fake" version of Linux
(ex: prgm 1 asks what are the contents of /usr/lib/python"
And linux will answer "/var/lib/docker/overlayfs/1/usr/lib/python")

---VM---
VM provide a "fake" version of CPU, ram, disk

---Rolling Deployments---
When we want to push a new versions on databases:
- create a new version of a database
- shut down a database old version
- repeat until all is in new versions

Benefits:
- well supported
- no huge bursts
- easily reverted

Downsides:
- Slow
- API compatibility

---Blue/Green Deployments---
- We create instances of new versions and only connect
  database to the new instances.
- When we know that new version is working fine, we rotate users to new version 
  instances
- Shut off the old instances

Benefits:
- easy to understand
- powerful
- extendable to workflows

Downsides:
- difficult to make hotfixes (if pb occurs)
- resources allocation not convinient
- side effects between != versions

---Rainbow Deployments---
- Blue/Green Deployments with many other colors which reprensent
  the remaining tasks. Each instance is closed when the current task ends.

---Acceptance Test---
- testing directly the new version in prod.
  but only a small part of the users are using it.
  those users have accepted to use it.

---Canary Deployments---
- blue/green deployment like but rotate only 5% of users to the new version.

blue/green deployment is a problem when there are many updat a day.

---Autoscalling---
- Adapt the number of vm needed to the traffic
- Service provider: ec2, k8s
- Ex: 
        - From 7am to 7pm : 20 vms  
        - From 7pm to 7am : 5 vms  
- For only big amount of time (1 hour)

---Serverless---
- Quickly started resources 
- Autoscalling is for small amount of time (100ms)
- Ex: a visitor comes, you start a vm for him and shut it off after

Use:
- Fast start
- Serverless

---Service Discovery---
- Need to find where services are located
- Simple example (with Cloudflare):
    - user knows that the front is at this adress and the back this one (statc way)
    - we connect the backend to database manually (in the code)
- Static way is impossible with rolling deployment

---Zero Downtime Deployment---
- Start the new version
- Wait until up and diver trafic to the new
- Shut off the old

- Works with a proxy that diver (ngnix)
- With a hashtable (you have to changed the hash to set up the new version) (+)
- Set up a DNS

---Internal DNS---
- Proxy will ask to DNS where is http://API
- DNS responds it is this: "11.111.1.10"

---Application Performance Managment (Log Aggregation)---
- Making easier to debug 
- Centralize the logs in a Dashbord to manipulate those data
- A log processor takes log lines and parse data (service example: Logstash)
 
---Authentication---
- Authentication is important
- Authentication can be tested

---Metrics monitoring---
- Find prod faults, debugging perf and stability pbs
- Service example: Promethus, AWS CloudWatch Metrics, Azure Monitor Metrics

- Store measurements
- Take data from various place
- Send alerts to relevant people
- Web UI to undertsand the alert

Important data:
- Request fulfillment times (=> time to respond)
- Request count (=> DDOS)
- Server resources (=> database size, TLS expiry time, ...)
